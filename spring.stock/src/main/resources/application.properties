
# spring.profiles.group.dev=h2,embeddedRedis,common,devRemain,commandRunner
spring.profiles.group.dev=h2,embeddedRedis,common,devRemain
spring.profiles.group.prod=aws-db,prodRedis,common,prodRemain
spring.profiles.active=dev






#secret
#oauth google
spring.security.oauth2.client.registration.google.client-id =${SPRING_OAUTH_GOOGLE_USERNAME}
spring.security.oauth2.client.registration.google.client-secret =${SPRING_OAUTH_GOOGLE_PASSWORD}
#email
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}
#use aws mariadb 
# spring.datasource.url=${SPRING_MARIA_DB_URL}
# spring.datasource.username=${SPRING_MARIA_DB_USERNAME}
# spring.datasource.password=${SPRING_MARIA_DB_PASSWORD}


!vim ~/.bachrc 
#"""
# export SPRING_OAUTH_GOOGLE_USERNAME=crtv4
# export SPRING_OAUTH_GOOGLE_PASSWORD=crtv4
# export SPRING_MAIL_USERNAME=crtv4
# export SPRING_MAIL_PASSWORD=crtv4
# export SPRING_MARIA_DB_URL=crtv4
# export SPRING_MARIA_DB_USERNAME=crtv4
# export SPRING_MARIA_DB_PASSWORD=crtv4
#"""
# source ~/.bashrc






#---
spring.config.activate.on-profile=devRemain
front.web.url=http://front.ttop324.ddnsfree.com
test.prop=devProp


#---
spring.config.activate.on-profile=prodRemain
front.web.url=https://springstock.ddnsfree.com
test.prop=prodProp


#---
spring.config.activate.on-profile=embeddedRedis
spring.redis.host=localhost
spring.redis.port=6977


#---
spring.config.activate.on-profile=prodRedis
spring.redis.host=redis
spring.redis.port=6379








#---
spring.config.activate.on-profile=h2
# use h2 memory db
spring.datasource.url=jdbc:h2:mem:db
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
#use hiberate to create table, not using flyway
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.flyway.enabled=false


#---
spring.config.activate.on-profile=h2-mysql
#use local h2 memory db  with sql format
spring.datasource.url=jdbc:h2:mem:db;MODE=MYSQL
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
# use flyway to create table, not hibernate auto create
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.flyway.enabled=false


#---
spring.config.activate.on-profile=h2-mysql-flyway
#use local h2 memory db  with sql format
spring.datasource.url=jdbc:h2:mem:db;MODE=MYSQL
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
# use flyway to create table, not hibernate auto create
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=none
spring.flyway.enabled=true
spring.flyway.baselineOnMigrate = true



#---
spring.config.activate.on-profile=local-db

spring.datasource.url=jdbc:mariadb://127.0.0.1:3306/mydb
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.username=
spring.datasource.password=

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=none
spring.flyway.enabled=true
spring.flyway.baselineOnMigrate = true


#---
spring.config.activate.on-profile=aws-db

#use aws mariadb 
spring.datasource.url=
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.username=
spring.datasource.password=


#use flyway to create table
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=none
spring.flyway.enabled=true
spring.flyway.baselineOnMigrate = true





















#---
spring.config.activate.on-profile=common


# colourful text display on command
spring.output.ansi.enabled=ALWAYS 
#show jpa sql init query in command
spring.jpa.show-sql=true
#show sql query
# spring.jpa.properties.hibernate.format_sql=true
# specify prefix for all controller
# server.servlet.contextPath=/api



# hiberate sql batch
spring.jpa.properties.hibernate.jdbc.batch_size=1000
spring.jpa.properties.hibernate.jdbc.order_inserts=true
spring.jpa.properties.hibernate.jdbc.order_updates=true
# log check for batch 
# spring.jpa.properties.hibernate.generate_statistics=true



#api document - swagger
springdoc.api-docs.path=/api-docs
springdoc.default-consumes-media-type=application/json
springdoc.default-produces-media-type=application/json
springdoc.swagger-ui.operations-sorter=alpha
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-query-params-without-oauth2=true
springdoc.paths-to-match=/**



# logging using logback
# logging level - print all com.ttop.spring.stock debug log
logging.level.org.springframework=ERROR
logging.level.com.ttop.spring.stock=DEBUG
#log pattern
logging.pattern.file=%d %p %c{1.} [%t] %m%n
logging.pattern.console=%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n
# output to a file
# logging.file=app.log
# temp folder example
#logging.file=${java.io.tmpdir}/app.log





#use redis as cache
spring.session.store-type=redis
spring.cache.type=redis

#oauth
spring.security.oauth2.client.registration.google.scope = profile, email
# spring.security.oauth2.client.registration.google.client-id =
# spring.security.oauth2.client.registration.google.client-secret = 

#email
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.auth=true
# spring.mail.username=
# spring.mail.password=
